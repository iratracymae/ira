import { Minipass } from 'minipass';
import { Path } from 'path-scurry';
import type { GlobOptions, GlobOptionsWithFileTypesFalse, GlobOptionsWithFileTypesTrue, GlobOptionsWithFileTypesUnset } from './glob.js';
import { Glob } from './glob.js';
/**
 * Syncronous form of {@link globStream}. Will read all the matches as fast as
 * you consume them, even all in a single tick if you consume them immediately,
 * but will still respond to backpressure if they're not consumed immediately.
 */
export declare function globStreamSync(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Minipass<Path, Path>;
export declare function globStreamSync(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Minipass<string, string>;
export declare function globStreamSync(pattern: string | string[], options: GlobOptionsWithFileTypesUnset): Minipass<string, string>;
export declare function globStreamSync(pattern: string | string[], options: GlobOptions): Minipass<Path, Path> | Minipass<string, string>;
/**
 * Return a stream that emits all the strings or `Path` objects and
 * then emits `end` when completed.
 */
export declare function globStream(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Minipass<string, string>;
export declare function globStream(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Minipass<Path, Path>;
export declare function globStream(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): Minipass<string, string>;
export declare function globStream(pattern: string | string[], options: GlobOptions): Minipass<Path, Path> | Minipass<string, string>;
/**
 * Synchronous form of {@link glob}
 */
export declare function globSync(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): string[];
export declare function globSync(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Path[];
export declare function globSync(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): string[];
export declare function globSync(pattern: string | string[], options: GlobOptions): Path[] | string[];
/**
 * Perform an asynchronous glob search for the pattern(s) specified. Returns
 * [Path](https://isaacs.github.io/path-scurry/classes/PathBase) objects if the
 * {@link withFileTypes} option is set to `true`. See {@link GlobOptions} for
 * full option descriptions.
 */
declare function glob_(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): Promise<string[]>;
declare function glob_(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Promise<Path[]>;
declare function glob_(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Promise<string[]>;
declare function glob_(pattern: string | string[], options: GlobOptions): Promise<Path[] | string[]>;
/**
 * Return a sync iterator for walking glob pattern matches.
 */
export declare function globIterateSync(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): Generator<string, void, void>;
export declare function globIterateSync(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Generator<Path, void, void>;
export declare function globIterateSync(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Generator<string, void, void>;
export declare function globIterateSync(pattern: string | string[], options: GlobOptions): Generator<Path, void, void> | Generator<string, void, void>;
/**
 * Return an async iterator for walking glob pattern matches.
 */
export declare function globIterate(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): AsyncGenerator<string, void, void>;
export declare function globIterate(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): AsyncGenerator<Path, void, void>;
export declare function globIterate(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): AsyncGenerator<string, void, void>;
export declare function globIterate(pattern: string | string["},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BAABEAF","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BAD1823","value":"25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BAED3FC","value":"24,25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BB42176","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BB459ED","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BB51A7D","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BB6E398","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BB8F821","value":"25"},{"op":"replace","path":"/settings/UTCPrivacy:::EventTag.5BB9E0A9","value":"24,25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BBAC93F","value":"25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BBBDCA7","value":"25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BC06EB7","value":"25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BC5C107","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BC8CC44","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD04D04","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD18493","value":"11,24,25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD1A6B6","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD1C6EF","value":"25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD36907","value":"24"},{"op":"replace","path":"/settings/UTCPrivacy:::EventTag.5BD36BE5","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD7A17B","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD83638","value":"24"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BD97C6F","value":"25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BDBD73B","value":"24"},{"op":"replace","path":"/settings/UTCPrivacy:::EventTag.5BDCCC25","value":"25"},{"op":"add","path":"/settings/UTCPrivacy:::EventTag.5BE0B96D","value":"24"},{"op":"add","path":"/settings/UT